每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。
HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。
--------------------------------------------------------------------------------------------------
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。
-》
从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
-》
假如我们在dev上的工作完成了，就可以把dev合并到master上。
Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。
-》
合并完分支后，可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支。
--------------------------------------------------------------------------
实验：

  首先，我们创建dev分支，然后切换到dev分支：
  git checkout -b dev
    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
      git branch dev
      git checkout dev
      
  然后，用git branch命令查看当前分支：
    git branch
      git branch命令会列出所有分支，当前分支前面会标一个*号
      
  然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改
    然后提交：
      git add readme.txt 
      git commit -m "branch test"
      
  现在，dev分支的工作完成，我们就可以切换回master分支：
    git checkout master
      切换回master分支后，再查看一个readme.txt文件，
      刚才没修改！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
      
  现在，我们把dev分支的工作成果合并到master分支上：
    git merge dev
      git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
      
  合并完成后，就可以放心地删除dev分支了：
    git branch -d dev
  
  删除后，查看branch，就只剩下master分支了：
    git branch
